{"ast":null,"code":"var _jsxFileName = \"C:\\\\ReactWorspace\\\\myapp\\\\src\\\\components\\\\BoardInsert.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n// 함수형 컴포넌트\n\n// 내보낼게 하나밖에 없으면 함수명 왼쪽에 export 사용.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BoardInsert({\n  게시글배열,\n  게시글배열변경함수\n}) {\n  _s();\n  console.log(props);\n\n  // let 게시글배열 = props.게시글배열;\n  // let 게시글배열변경함수 = props.게시글배열변경함수;\n  // let {게시글배열, 게시글배열변경함수} = props;\n\n  /*\r\n      컴포넌트 작성규칙\r\n      1) 작명시 첫글자는 대문자로.\r\n      2) 다른 컴포넌트의 외부에 작성해야한다.\r\n        컴포넌트로 만들면 좋은 요소\r\n      1) 반복적으로 출현하는 html 요소\r\n      2) 애플리케이션의 각 페이지들\r\n      3) 자주 변경되는 html요소\r\n        컴포넌트 많이 만들면 안좋은점. \r\n      1) 컴포넌트 많이 만들면 유지보수가 힘들다. 프록스 관리도 힘들어진다.\r\n      2) 설계를 잘못하면, 렌더링 하는데 시간이 오래 걸린다.\r\n    */\n  // let 글제목; \n  let [글제목, 글제목변경함수] = useState(''); //초기값으로 빈 문자열 선언해둠\n  let [글내용, 글내용변경함수] = useState('');\n  let [작성자, 작성자변경함수] = useState('');\n\n  // function 게시글등록(){ }\n  const 게시글등록 = () => {\n    /*\r\n      게시글 등록 작업순서\r\n      1) 내가 입력한 값 가져오기\r\n      2) 가져온 데이터를 바탕으로 게시글 객체 생성하기\r\n      3) 생성한 게시글 객체를 게시글 배열에 추가한 후, 게시글 배열 변경함수 호출하기 (랜더링)\r\n    */\n\n    // 1) 내가 입력한 값 가져오기\n    // js방식 : document.querySelector(선택자).value\n    // react 방식 : state(글제목,글내용,작성자)\n    console.log(글내용, 글제목, 작성자);\n    // ** => false, \"dasdsa\" => true\n    if (!글내용 || !글제목 || !작성자) {\n      alert(\"뭐든 하십쇼\");\n      return;\n    }\n\n    //2) 가져온 데이터를 바탕으로 게시글 객체 생성하기\n    let 게시글 = {\n      //글번호는 게시글 배열에서 고유해야 함 , 게시글 배열에서 가장 큰 글번호값을 찾은 후 +1해서 반환해줄 예정\n      글번호: Math.max(...게시글배열.map(function (게시글, 인덱스) {\n        return 게시글.글번호;\n      })) + 1,\n      //map함수를 이용해서 반복문을 돌리며 게시글의 글번호를 배열 형태로 반환 [1,2,3,4,5,6,7,8,9,10]\n      글제목,\n      // key,value값에 들어가는 변수명이 동일한 경우 속성명 단축구문을 제공\n      글내용,\n      작성자,\n      작성일: new Date().toLocaleDateString() // 2024. 01. 15 \n    };\n\n    // 3) 생성한 게시글 객체를 게시글 배열에 추가한 후, 게시글 배열 변경함수 호출하기 (랜더링)\n    게시글배열.push(게시글);\n    // 게시글배열변경함수(게시글배열); // 이렇게하면 주소값을 넣는것이어서 안됨\n    게시글배열변경함수([...게시글배열]); // 전개되면 배열이 아니기 때문에 [] 를 넣어주는 것\n\n    // 입력값 초기화(state)초기화\n    글제목변경함수('');\n    글내용변경함수('');\n    작성자변경함수('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outer\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uB4F1\\uB85D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"enroll-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uC81C\\uBAA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: 3,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"\\uAE00\\uC81C\\uBAA9\",\n            onChange: function (e) {\n              //input태그에 들어있는 값이 바뀔 때 실행됨\n              글제목변경함수(e.target.value); // 현재 이벤트가 발생한 객체의 value값\n            }\n            // 입력값 초기화\n            ,\n            value: 글제목\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uC791\\uC131\\uC790\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: 3,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"\\uC791\\uC131\\uC790\",\n            onChange: function (e) {\n              //input태그에 들어있는 값이 바뀔 때 실행됨\n              작성자변경함수(e.target.value); // 현재 이벤트가 발생한 객체의 value값\n            },\n            value: 작성자\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"\\uAE00\\uB0B4\\uC6A9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          colSpan: 3,\n          style: {\n            height: \"200px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"\\uAE00\\uB0B4\\uC6A9\",\n            onChange: function (e) {\n              //input태그에 들어있는 값이 바뀔 때 실행됨\n              글내용변경함수(e.target.value); // 현재 이벤트가 발생한 객체의 value값\n            },\n            value: 글내용\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {\n          colSpan: 4,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: 게시글등록,\n            children: \"\\uB4F1\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n// export default BoardInsert; // 내보내기.\n_s(BoardInsert, \"MOVhPCHvQ8ZIjbHdmATKGvrObzo=\");\n_c = BoardInsert;\nvar _c;\n$RefreshReg$(_c, \"BoardInsert\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","BoardInsert","게시글배열","게시글배열변경함수","_s","console","log","props","글제목","글제목변경함수","글내용","글내용변경함수","작성자","작성자변경함수","게시글등록","alert","게시글","글번호","Math","max","map","인덱스","작성일","Date","toLocaleDateString","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","colSpan","type","name","onChange","e","target","value","style","height","onClick","_c","$RefreshReg$"],"sources":["C:/ReactWorspace/myapp/src/components/BoardInsert.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n// 함수형 컴포넌트\r\n\r\n\r\n// 내보낼게 하나밖에 없으면 함수명 왼쪽에 export 사용.\r\nexport default function BoardInsert({게시글배열, 게시글배열변경함수}){\r\n    console.log(props);\r\n\r\n    // let 게시글배열 = props.게시글배열;\r\n    // let 게시글배열변경함수 = props.게시글배열변경함수;\r\n    // let {게시글배열, 게시글배열변경함수} = props;\r\n\r\n        /*\r\n            컴포넌트 작성규칙\r\n            1) 작명시 첫글자는 대문자로.\r\n            2) 다른 컴포넌트의 외부에 작성해야한다.\r\n\r\n            컴포넌트로 만들면 좋은 요소\r\n            1) 반복적으로 출현하는 html 요소\r\n            2) 애플리케이션의 각 페이지들\r\n            3) 자주 변경되는 html요소\r\n\r\n            컴포넌트 많이 만들면 안좋은점. \r\n            1) 컴포넌트 많이 만들면 유지보수가 힘들다. 프록스 관리도 힘들어진다.\r\n            2) 설계를 잘못하면, 렌더링 하는데 시간이 오래 걸린다.\r\n\r\n        */ \r\n        // let 글제목; \r\n     let [글제목, 글제목변경함수] = useState(''); //초기값으로 빈 문자열 선언해둠\r\n     let [글내용, 글내용변경함수] = useState('');\r\n     let [작성자, 작성자변경함수] = useState('');\r\n     \r\n     // function 게시글등록(){ }\r\n     const 게시글등록 = () => {\r\n     \r\n      /*\r\n        게시글 등록 작업순서\r\n        1) 내가 입력한 값 가져오기\r\n        2) 가져온 데이터를 바탕으로 게시글 객체 생성하기\r\n        3) 생성한 게시글 객체를 게시글 배열에 추가한 후, 게시글 배열 변경함수 호출하기 (랜더링)\r\n      */\r\n\r\n        // 1) 내가 입력한 값 가져오기\r\n        // js방식 : document.querySelector(선택자).value\r\n        // react 방식 : state(글제목,글내용,작성자)\r\n        console.log(글내용,글제목,작성자);\r\n        // ** => false, \"dasdsa\" => true\r\n        if(!글내용  || !글제목  || !작성자  ){\r\n          alert(\"뭐든 하십쇼\");\r\n          return;\r\n        }\r\n\r\n      \r\n        //2) 가져온 데이터를 바탕으로 게시글 객체 생성하기\r\n        let 게시글 = {\r\n          //글번호는 게시글 배열에서 고유해야 함 , 게시글 배열에서 가장 큰 글번호값을 찾은 후 +1해서 반환해줄 예정\r\n          글번호: Math.max( ...게시글배열.map(function(게시글,인덱스){ return 게시글.글번호 })  ) +1, \r\n                //map함수를 이용해서 반복문을 돌리며 게시글의 글번호를 배열 형태로 반환 [1,2,3,4,5,6,7,8,9,10]\r\n          글제목 , // key,value값에 들어가는 변수명이 동일한 경우 속성명 단축구문을 제공\r\n          글내용 , \r\n          작성자 , \r\n          작성일 : new Date().toLocaleDateString() // 2024. 01. 15 \r\n        }\r\n\r\n        // 3) 생성한 게시글 객체를 게시글 배열에 추가한 후, 게시글 배열 변경함수 호출하기 (랜더링)\r\n        게시글배열.push(게시글);\r\n        // 게시글배열변경함수(게시글배열); // 이렇게하면 주소값을 넣는것이어서 안됨\r\n        게시글배열변경함수([...게시글배열]); // 전개되면 배열이 아니기 때문에 [] 를 넣어주는 것\r\n\r\n      // 입력값 초기화(state)초기화\r\n      글제목변경함수('');\r\n      글내용변경함수('');\r\n      작성자변경함수('');\r\n      \r\n     }\r\n\r\n        \r\n    return (\r\n        <div className='outer'>\r\n        <br/><h2>등록</h2>\r\n        <table className='enroll-table'>\r\n            <tr>\r\n              <th>제목</th>\r\n              <td colSpan={3}>\r\n                <input type='text' name='글제목' \r\n                onChange={ function(e){ //input태그에 들어있는 값이 바뀔 때 실행됨\r\n                  글제목변경함수(e.target.value) // 현재 이벤트가 발생한 객체의 value값\r\n                }}\r\n                // 입력값 초기화\r\n                value={글제목} \r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>작성자</th>\r\n              <td colSpan={3}>\r\n                <input type='text' name='작성자' \r\n                onChange={ function(e){ //input태그에 들어있는 값이 바뀔 때 실행됨\r\n                  작성자변경함수(e.target.value) // 현재 이벤트가 발생한 객체의 value값\r\n                }} \r\n                value={작성자} \r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>글내용</th>\r\n              <td colSpan={3} style={{height : \"200px\"} }>\r\n                <textarea name='글내용'\r\n                 onChange={ function(e){ //input태그에 들어있는 값이 바뀔 때 실행됨\r\n                  글내용변경함수(e.target.value) // 현재 이벤트가 발생한 객체의 value값\r\n                }} \r\n                value={글내용} \r\n                ></textarea>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th colSpan={4}><button onClick={ 게시글등록 }>등록</button></th>\r\n            </tr>\r\n        </table>\r\n      </div>\r\n    ) \r\n}\r\n// export default BoardInsert; // 내보내기.\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}